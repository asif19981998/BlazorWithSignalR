@page "/"





@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime _jsRuntime
@inject IToastService _toastService
<PageTitle>Index</PageTitle>
@if (!string.IsNullOrEmpty(NotificationMessage))
{
    @*<div class="alert alert-success alert-dismissible fade show" role="alert">
        <strong>@NotificationTitle</strong> @NotificationMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>*@
  
}
<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<button @onclick="IncrementCount">Increment</button>
<button @onclick="DecrementCount">Decrement</button>
<p>
    @count
</p>
<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    private string NotificationTitle { get; set; }
    private string NotificationMessage { get; set; }
    int count = 0;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();
        await hubConnection.StartAsync();
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {

            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });
        //hubConnection.On<string>("IncrementCountMessage", (message) =>
        //{

        //    var encodedMsg = $"{message}";
        //    messages.Add(encodedMsg);
        //    StateHasChanged();
        //});

        hubConnection.On<string>("IncrementCountMessage",async (message) =>
       {
       // Display the notification to the user
       // await _jsRuntime.InvokeVoidAsync("showNotification", "New Notification", message);
       //    var options = new ToastSettings
       //     {
       //         Position = ToastPosition.BottomRight
       //     };

       //ToastService.ShowSuccess("Successfully completed the operation!");
           _toastService.ShowSuccess("Success");
       //NotificationTitle = "New Notification";
           //NotificationMessage = message;

       // Call StateHasChanged to update the UI
           await InvokeAsync(() => StateHasChanged());
       });

        // hubConnection.On<string, string>("ReceiveMessage",async (user, message) =>
        //{
        //// Display the notification to the user
        //// await _jsRuntime.InvokeVoidAsync("showNotification", "New Notification", message);

        //    NotificationTitle = "New Notification";
        //    NotificationMessage = message;

        //// Call StateHasChanged to update the UI
        //    await InvokeAsync(() => StateHasChanged());
        //});
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public async Task IncrementCount()
    {
        await Task.Yield();
        //ToastService.ShowSuccess("Successfully completed the operation!");
        count++;
        if (count>10)
        {
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("IncrementCountMessage", $"Count is over:{count}");
            }
        }
        StateHasChanged();

    }

    public async Task DecrementCount()
    {
        await Task.Yield();
        count--;
        if (count<10)
        {
            NotificationMessage = null; 
        }
    }
}